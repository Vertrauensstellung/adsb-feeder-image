#!/bin/bash

exec 2>&1 1>>/var/log/adsb-setup.log

# first - move this script to /opt/feeder-update and run it there
DIR=$(dirname -- "$(readlink -f "${BASH_SOURCE}")")
if [ "${DIR}" != "/opt/feeder-update" ]; then
    echo "move $(basename $0) to /opt/feeder-update"
    mkdir -p /opt/feeder-update
    cp "${BASH_SOURCE}" /opt/feeder-update
    bash /opt/feeder-update/$(basename $0) "$@"
    exit
fi
echo "running $(basename $0) in ${DIR}"

BRANCH=$(sed 's/.*(\(.*\)).*/\1/' < /opt/adsb/adsb.im.version)
if [ "$BRANCH" = "$(cat /opt/adsb/adsb.im.version)" ] ; then
    BRANCH="main"
fi

echo "checkout the ${BRANCH} branch of the upstream feeder image"
cd ${DIR}
if [ -d adsb-feeder-image ] ; then
    cd adsb-feeder-image
    git checkout $BRANCH
    # let's make sure we get a clean checkout, no conflicts, no issues
    git reset --hard HEAD~50
    git config pull.ff only
    if ! git pull ; then
        echo "even after going back 50 commits, the git pull wasn't a fast forward, giving up"
        exit
    fi
else
    if ! git clone -b $BRANCH https://github.com/dirkhh/adsb-feeder-image; then
        echo "git clone failed, giving up"
        exit
    fi
    cd adsb-feeder-image
fi

TARGET=$BRANCH
if [ "$1" != "" ] ; then
    TARGET="$1"
    echo "trying to find the reference given: $TARGET"
    if ! git checkout "$TARGET" ; then
        if ! git checkout -B explicitTarget "$TARGET" ; then
            echo "cannot find reference $TARGET, giving up"
            exit
        else
            # that was a reference, not a branch, so clear out BRANCH
            BRANCH=""
        fi
    else
        BRANCH="$TARGET"
    fi
else
    if [ "$TARGET" = "main" ] ; then
        # on the main branch, grab the last tag, otherwise check out what's there
        TARGET=$(git tag --sort=version:refname|tail -1)
    fi
    git branch -D ${TARGET} 2> /dev/null
    git checkout -b ${TARGET} ${TARGET}
fi

# wow, that was a lot of work... but now we should have the correct stuff checked out

if [ "$BRANCH" != "" ] ; then
    BRANCH="(${BRANCH})"
fi
DATE_COMPONENT=$(git log -20 --date=format:%y%m%d --format="%ad" | uniq -c | head -1 | awk '{ print $2"."$1 }')
TAG_COMPONENT=$(git describe --match "v[0-9]*" | cut -d- -f1)
VERSION="${TAG_COMPONENT}${BRANCH}-${DATE_COMPONENT}"
echo "${TARGET} checked out successfully, starting the actual upgrade to ${VERSION}"

echo "prepare the files that we need to replace"
mkdir -p ${DIR}/root
cp -r src/modules/adsb-feeder/filesystem/root ${DIR}

echo "stop the running service"
systemctl stop adsb-setup.service

echo "copy the updated files in place"
cd ${DIR}/root

# if this an app and not the full image, prune some of the files that aren't
# wanted for the app and copy the trees we need over
if [ ! -f /boot/ADSB-README.txt ] ; then
    rm -f ./usr/lib/systemd/system/adsb-bootstrap.service
    cp -a ./usr/lib/systemd/system/* /etc/systemd/system/
    cp -a ./opt/adsb/* /opt/adsb
else
    # copy the complete tree into the / filesystem
    cp -r . /
fi

# make sure the version information is correct
echo $VERSION > /opt/adsb/adsb.im.version
sed -i "s/BASE_VERSION=.*/BASE_VERSION=$VERSION/" /opt/adsb/config/.env

echo "restart the service"
systemctl daemon-reload
systemctl start adsb-setup.service

echo "finally, trigger a container upgrade so that they match the new image"
/opt/adsb/docker-update-adsb-im -no-fetch

echo "in an abundance of caution, restart the adsb-setup service"
systemctl restart adsb-setup.service

echo "update to ${VERSION} complete"
